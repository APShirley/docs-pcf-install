---
title: Deploying Elastic Runtime on AWS
---
<% $this_IaaS = 'AWS-cloudform' %>

This topic describes how to install and configure Elastic Runtime after
deploying the CloudFormation template for [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) on Amazon Web
Services (AWS).
Use this topic when [Installing Pivotal Cloud Foundry Using AWS CloudFormation](./cloudform.html).

Before beginning this procedure, ensure that you have successfully completed all
steps in the [Deploying the CloudFormation Template for PCF on AWS](./cloudform-template.html) and [Configuring Ops Manager Director after Deploying PCF on AWS using CloudFormation](./cloudform-om-config.html) topics.

## <a id='open-outputs'></a>Step 1: Open the Outputs Tab in AWS ##

In the Stacks Dashboard of the [AWS Console](https://console.aws.amazon.com/),
select the **pcf-stack** checkbox, then select the **Outputs** tab.

<%= image_tag("cloudform/aws-cloudform-stacks.png") %>

Keep this **Outputs** tab open. In the steps described below, use information contained here to configure Elastic Runtime.

## <a id='add-er'></a>Step 2: Add Elastic Runtime to Ops Manager ##

1. Navigate to the Pivotal Cloud Foundry Operations Manager Installation
Dashboard.

1. Click the Pivotal Network link on the left to add Elastic Runtime to Ops
Manager. For more information, refer to the [Adding and Deleting Products](/pivotalcf/customizing/add-delete.html) topic.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

    <%= image_tag("cloudform/er-tile.png") %>

## <a id='assign-az'></a>Step 3: Assign Availability Zones ##

1. Select **Assign Availability Zones**.

1. Select the option button and checkbox to define the Availability Zone for singleton jobs and job balancing.

1. Click **Save**.

    <%= image_tag("cloudform/er-az.png") %>

## <a id='create-dbs'></a>Step 4: Create System Databases ##

You must manually create the databases required by Elastic Runtime on the RDS instance provisioned by the CloudFormation script.

1. Add the AWS-provided key pair to your SSH profile so that you can access the Ops Manager VM:

    <pre class='terminal'>ssh-add aws-keypair.pem</pre>

1. SSH into your Ops Manager VM using its IP address and the username `ubuntu`:

    <pre class='terminal'>ssh ubuntu@OPS_MANAGER_IP</pre>

    You can find the IP address for the Ops Manager VM on the AWS EC2 console.

1. Run the following terminal command to log in to your RDS instance through the MySQL client, using information from your AWS dashboard **Outputs** tab to fill in the placeholder values as indicated in the table below:

     <pre class='terminal'>mysql --host=RDS-HOSTNAME --user=RDS-USERNAME --password=RDS-PASSWORD</pre>
  For each placeholder value in the above terminal command, use the **Value** from the **Outputs** tab of the corresponding **Key** in the table below:
  <table border="1" class="nice" >
    <tr>
      <th><strong>Placeholder</strong></th>
      <th><strong>Outputs Key</strong></th>
    </tr>
    <tr>
      <td>RDS-HOSTNAME</td>
      <td>PcfRdsAddress</td>
    </tr>
    <tr>
      <td>RDS-USERNAME</td>
      <td>PcfRdsUsername</td>
    </tr>
    <tr>
      <td>RDS-PASSWORD</td>
      <td>PcfRdsPassword</td>
    </tr>
  </table>

1. Run the following MySQL commands to create databases for each of the six Elastic Runtime components that require a database:
  <pre class="terminal">CREATE database uaa;
  CREATE database ccdb;
  CREATE database console;
  CREATE database notifications;
  CREATE database autoscale;
  CREATE database app\_usage\_service;</pre>

1. Exit the MySQL client and close your connection to the Ops Manager VM.

## <a id='sys-db'></a>Step 5: Configure System Databases ##

1. Select **System Database Config**.

1. Select the **External Databases** option.

1. Complete the **System Database Config** page with information from the corresponding **Outputs** tab in the AWS Console, according to the following table:
  <table border="1" class="nice" >
    <tr>
      <th><strong>Ops Manager Field</strong></th>
      <th><strong>Outputs Key</strong></th>
    </tr>
    <tr>
      <td><str>Hostname DNS Name</str></td>
      <td><str>PcfRdsAddress</str></td>
    </tr>
    <tr>
      <td><str>TCP Port</str></td>
      <td><str>PcfRdsPort</str></td>
    </tr>
    <tr>
      <td><str>Username</str></td>
      <td><str>PcfRdsUsername</str></td>
    </tr>
    <tr>
      <td><str>Password</str></td>
      <td><str>PcfRdsPassword</str></td>
    </tr>
  </table>

1. Click **Save**.

    <%= image_tag("cloudform/sys-db.png") %>

1. <%= partial 'mysql_proxy_config' %>

## <a id='filestore'></a>Step 6: File Storage Config Page ##

1. In the Elastic Runtime tile, select **File Storage Config**.

1. Select the **External S3-Compatible Filestore** option and complete the
following fields:
    * For **URL Endpoint**:
        1. In a browser, open the [Amazon Simple Storage Service (S3) table](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region).
        1. Prepend `https://` to the **Endpoint** for your region and copy it
          into the Ops Manager **URL Endpoint** field.
		      <br />
		      For example, in the **us-west-1** region, use
		      `https://s3-us-west-1.amazonaws.com/`.
    * Use the values of your AWS **Outputs** tab keys to fill in the remaining fields as follows:
    <table border="1" class="nice" >
      <tr>
        <th>Ops Manager Field</th>
        <th>Outputs Key</th>
      </tr>
      <tr>
        <td>Bucket Name</td>
        <td>PcfElasticRuntimeS3Bucket</td>
      </tr>
      <tr>
        <td>Access Key ID</td>
        <td>PcfIamUserAccessKey</td>
      </tr>
      <tr>
        <td>AWS Secret Key</td>
        <td>PcfIamUserSecretAccessKey</td>
      </tr>
    </table>

1. Click Save.

    <%= image_tag("cloudform/external_filestore_config.png") %>

## <a id='security-config'></a>Step 7: Set IPs and Complete Security Configuration ##

Select **IPs and Ports** and complete the IPs, Loggregator Port, and SSL Certificate fields:

### IPs and Loggregator Port

1. Leave the **Router IPs** and **HAProxy IPs** fields blank.

1. Set **Loggregator Port** to **4443**.

### SSL Certificate

<%= partial 'security_config' %>

## <a id='cname'></a>Step 8: Add CNAME Record for Your Custom Domain ##

In the [Use the AWS CLI to upload your SSL Cert](./cloudform-template.html#upload-cert) step, you uploaded an SSL certificate for your PCF wildcard domain to AWS. 
In this step you redirect all wildcard queries for your domain to the DNS name of your ELB.

<p class='note'><strong>Note</strong>: Do not point your wildcard domain at the numeric IP address for your ELB because this changes frequently.</p>

1. Find the DNS hostname of your ELB. The **Output** tab of the CloudFormation page in the AWS dashboard lists this as the value for the key **PcfElbDnsName**.

1. Log in to the DNS registrar that hosts your domain (for example, Network Solutions, Godaddy, or Register.com).

1. Create a CNAME record with your DNS registrar that points `*.YOUR-DOMAIN.com` to the DNS hostname of your ELB.

1. Save changes the web interface for your DNS registrar .

1. In the terminal, run the following `dig` command to confirm that you created your CNAME record successfully:

<pre class='terminal'>dig xyz.MY-DOMAIN.COM</pre>

You should see the CNAME record that you just created:

<pre class='terminal'>
;; ANSWER SECTION:
xyz.MY-DOMAIN.COM.      1767    IN  CNAME pcf-ert-frankfurt-pcf-elb-428333773.eu-central-1.elb.amazonaws.com.
</pre>
<p class='note'><strong>Note</strong>: You <strong>must</strong> complete this step before proceeding to Cloud Controller configuration. A difficult-to-resolve problem can occur if the wildcard domain is improperly cached before the CNAME is registered. </p>

## <a id='cloud-controller'></a>Step 9: Cloud Controller Page ##

1. Select **Cloud Controller** and enter your PCF wildcard domain in both the **System Domain** and **Apps Domain** fields.

1. Click **Save**.

    <%= image_tag("cloudform/cloud_controller_domain_config.png") %>

## <a id='smtp'></a>Step 10: (Optional) SMTP Config Page ##

Elastic Runtime uses SMTP to send invitations and confirmations to Apps Manager
users.
You must complete the **Configuration for SMTP** page if you want to enable
end-user self-registration.

1. Select **SMTP Config**.

1. Enter your reply-to and SMTP email information.

1. For **SMTP Authentication Mechanism**, select `none`.

1. Click **Save**.

<p class='note'><strong>Note</strong>: If you do not configure the SMTP
settings using this form, the administrator must create orgs and users using
the cf CLI tool. See <a href="../adminguide/cli-user-management.html">Creating and Managing Users with the cf CLI</a> for more information.</p>

<%= image_tag("cloudform/smtp.png") %>

## <a id='experimental-features'></a>Step 11: (Optional) Enable Experimental Features ##

<%= partial 'experimental-features' %>

## <a id='errands'></a>Step 12: Configure Errands Page ##

<%= partial 'errands' %>

## <a id='config-elb'></a>Step 13: Configure Router to Elastic Load Balancer ##

<%= partial 'resource_config_elb' %>

## <a id='disable-resources'></a>Step 14: (Optional) Disable Unused Resources ##

<%= partial 'disable_resources' %>

## <a id='complete'></a>Step 15: Complete the Elastic Runtime Installation ##

1. Click the **Installation Dashboard** link to return to the Installation
Dashboard.

1. Click **Apply Changes**. If the following ICMP error message appears, click
**Ignore errors and start the install**.

    <%= image_tag("cloudform/install-error.png") %>

    The install process generally requires a minimum of 90 minutes to complete.
	The image shows the Changes Applied window that displays when the
	installation process successfully completes.

    <%= image_tag("cloudform/ops-manager-complete.png") %>

---

Return to [Installing Pivotal Cloud Foundry Using AWS CloudFormation](./cloudform.html).