---
title: Using SSL with a Self-Signed Certificate in Pivotal Ops Metrics
owner: Metrix
---

<strong><%= modified_date %></strong>

Secure Socket Layer (SSL) is a standard protocol for establishing an encrypted
link between a server and a client.
To communicate over SSL, a client needs to trust the SSL certificate of the
server.

There are two kinds of SSL certificates: signed and self-signed.

* **Signed**: A Certificate Authority (CA) signs the certificate.
A CA is a trusted third party that verifies your identity and certificate
request, then sends you a digitally signed certificate for your secure server.
Client computers automatically trust signed certificates.

* **Self-signed**: Your own server generates and signs the certificate.
Clients do not automatically trust self-signed certificates.
To communicate over SSL with a server providing a self-signed certificate, a
client must be explicitly configured to trust the certificate.
  <%= partial '../customizing/known-issue-self-signed-certs' %>

Clients keep all trusted certificates in a kind of keystore called a truststore.
To configure a client to trust a self-signed certificate, import the
self-signed certificate to a truststore on the client.

Refer to the following procedures to use SSL with a self-signed certificate in Pivotal Ops Metrics.

## <a id='enable'></a>Step 1: Enable SSL ##

To enable SSL, follow the step below to configure a PKCS#1 certificate in your release manifest.

1. Use `openssl genrsa` with the `-out` flag to generate a new private key. For example, run the following command to generate a 2048-bit private key named `privkey.pem`:

    <pre class="terminal">
    $ openssl genrsa -out privkey.pem 2048
    </pre>

1. Use `openssl req` to generate a new certificate signing request  based on your private key.

    <pre class="terminal">
    $ openssl req -new -key privkey.pem -out server.csr
    </pre>

1. Use the command below to create a self-signed certificate, `server.crt`, from the existing private key, `privkey.pem` and the existing certificate signing request, `server.csr`:

    <pre class="terminal">
    $ openssl x509 -req -days 365 -in server.csr -signkey privkey.pem -out server.crt
    </pre>

1. Use `keytool -import` to create a client keystore. Note that the local JMX client uses this keystore, not the server.

    <pre class="terminal">
    $ keytool -import -alias ops-metrics-ssl -file ops-metrics.cer -keystore localhost.truststore
    </pre>

1. Enter a password for the keystore when prompted. Record this password.

1. Enter `yes` when prompted to trust the certificate.

1. Use `bosh edit deployment` to open your release manifest for editing.

    <pre class="terminal">
    $ bosh edit deployment
    </pre>

    In your release manifest, copy your private key into the `ssl_private_key` field and your public certificate into the `ssl_cert` field.

    ```
    properties:
      maximus:
        username: USERNAME
        password: PASSWORD
        public_hostname: HOSTNAME
        use_ssl: true # This defaults to true
        ssl_cert: ! '-----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----'

		ssl_private_key: ! '-----BEGIN PRIVATE KEY-----
          ...
          -----END PRIVATE KEY----- '
    ```

1. Verify your settings using the local JMX client of your choice.
The example below uses `jconsole`.
Replace `KEYSTORE_PASSWORD` with the keystore password that you recorded in a previous step:
    <pre class="terminal">
    $ jconsole -J-Djavax.net.ssl.trustStore=/lib/home/jcert/localhost.truststore -J-Djavax.net.ssl.trustStorePassword=KEYSTORE_PASSWORD
    </pre>
    1. In the **Remote Process** field, enter the IP address of the Maximus
    server, port number `44444`.
    <br><br>
    1. To complete the **Username** and **Password** fields, refer to the
    **Credentials** tab of the Metrics tile in Pivotal Ops Manager.
    By default, these credentials are `admin` and `admin`.
    <%= image_tag("images/ssl/jconsole.png") %>

## <a id='generate'></a>Step 2: Generate a Self-Signed Certificate ##

Follow the steps below to generate a self-signed certificate on your server:

1. In Pivotal Ops Manager, click the **Pivotal Ops Metrics** tile.
1. Check **Enable SSL**.
1. Click **Generate Self-Signed RSA Certificate** and check the **Trust Self-Signed Certificates** box.

    <%= image_tag("images/ssl/generate-ssl.png") %>

1. Enter your system and application domains in wildcard format.
Optionally, also add any custom domains in wildcard format.
Click **Generate.**

    <%= image_tag("images/ssl/generate.png") %>

1. Select and copy the certificate.

    <%= image_tag("images/ssl/copy.png") %>

1. Paste the certificate into a text file and save as `ops-metrics.cer`.

## <a id='import'></a>Step 3: Import the Self-signed Certificate to a Truststore ##

Follow the steps below to import the self-signed certificate to your client:

1. Copy `ops-metrics.cer` from your server to your client.

1. Navigate to the client directory where you copied the saved certificate.

1. Use `keytool -import` to import the certificate with an alias of `ops-metrics-ssl` to the truststore `localhost.truststore`:

    <pre class="terminal">
    $ keytool -import -alias ops-metrics-ssl -file ops-metrics.cer -keystore localhost.truststore
    </pre>
    * If `localhost.truststore` already exists, a password prompt appears.
      Enter the keystore password that you recorded in a previous step.
    * If `localhost.truststore` does not exist, you must create a password.

1. Verify the details of the imported certificate.

## <a id='start'></a>Step 4: Start a Monitoring Tool with the Truststore ##

Once you import the self-signed certificate to the `localhost.truststore`
truststore on the client, you must instruct your monitoring tool to use the
truststore.

On a command line, start your monitoring tool with the location and password of the truststore as follows:

1. Pass the location of `localhost.truststore` to the monitoring tool using
the `javax.net.ssl.trustStore` property.

1. Pass the truststore password using the `javax.net.ssl.trustStorePassword`
property.

    Example starting jConsole:

    <pre class="terminal">
    $ jconsole -J-Djavax.net.ssl.trustStore=/lib/home/jcert/localhost.truststore -J-Djavax.net.ssl.trustStorePassword=KEYSTORE_PASSWORD
    </pre>

1. Enter a fully-qualified hostname. This hostname must exist in a subdomain covered by your certificate.
    <p class='note'><strong>**Note**</strong>: You must enter a fully-qualified
    hostname, not an IP address.
    </p>
    Your monitoring tool should now communicate with your server through the
    SSL connection.