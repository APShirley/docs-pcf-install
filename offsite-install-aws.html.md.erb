---
title: Installing Pivotal Cloud Foundry in a C2S Environment
---

## <a id="background"></a>Background ##

The goal of this document is to offer operators within critical government or enterprise organizations the hands-on, step-by-step technical documentation to implement an end-to-end automated solution to deploying a private, offline (on-premises) Pivotal Cloud Foundry (PCF). 

This document specifically addresses the need for a continuous deployment, continuous integration pipeline of reliable, integration-tested Cloud Foundry deployments which can be operated in a secure environment.
<!-- JO, DT: Will the ci/cd portion of this be true by phase 1 end? -->

The assumptions made are several: 

- That a small team, typically two operators, can deploy, troubleshoot and maintain an entire Cloud Foundry environment which supports thousands of servers and applications; 
- That the normal release cycle of Pivotal Cloud Foundry’s cf-release provides the most reliable and stable cloud environment possible, leveraging the entire Pivotal Cloud Operations and Engineering teams’ expertise in running the cutting edge Pivotal Web Services, which remains several release versions ahead of cf-release and, therefore, acts as its integration testing suite;
- That clients require the ability to start with one data image, for example an Amazon Machine Image, securely scan that image, and deploy their entire Cloud Foundry from those contents, in an automated fashion, and in an offline, secure environment.

This guide describes how to install [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) on Cloud Computing Services (C2S) using the PCF CloudFormation template. The use of term Amazon Web Services (AWS) also refers to the C2S environment throughout this document. 
<!-- JO, DT: Should the infrastructure be referred to as C2S or AWS? -->

The CloudFormation template for Pivotal Cloud Foundry describes the set of necessary AWS
resources and properties. When you create an AWS stack using the PCF template, CloudFormation provisions all the infrastructure that you need to deploy PCF on AWS.

## <a id='prerequisites'></a>Prerequisites ##

You must have the following in order to follow the procedure described here:

* An AWS account that can accomodate the minimum resource requirements for a PCF installation:
    * 1 Elastic Load Balancer
    * 1 Relational Database Service. We recommend at least a db.m3.large instance with 100 GB of allocated storage.
    * 2 S3 Buckets
    * EC2 Instances:
        * 10 t2.micros
        * 1 r3.xlarge (1 per DEA)
        * 1 c4.xlarge
        * 2 m3.large

* The appropriate region selected within your AWS account. See the [Amazon documentation on regions and availability zones](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions-availability-zones) for help selecting the correct region for your deployment.
* The [AWS CLI](https://aws.amazon.com/cli/) installed on your machine, and configured with user credentials that have admin access to your AWS account.
* Sufficiently high instance limits (or no instance limits) on your AWS account. Installing Pivotal Cloud Foundry requires more than the default 20 concurrent instances (how many?? Where is this checked?).
* A key pair to use with your Pivotal Cloud Foundry deployment. [Create a key pair in AWS](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html).
* A registered wildcard domain for your PCF installation. You will need this registered domain when configuring your SSL certificate and Cloud Controller.
* An SSL certificate for your PCF domain. This can be a self-signed cert, but Pivotal recommends using a self-signed certificate only for testing and development. You should obtain a cert from your Certificate Authority for use in your production environment.

<p class="note"><strong>Note</strong>: If you will not have online access while installing PCF, make sure you can complete the prerequisites above without documentation. 
</p>

The steps below are fully self-contained and where they rely on links to other URLs, the relevant pieces have been provided.

## <a id="bootstrap-aws"></a>Step 1: Bootstrap AWS Environment ##

From an environment with AWS CLI tools and the requisite credentials:

- Copy and modify the PCF Offline cloudformation bootstrap artifacts: [pcf.json](offsite-install-copy-pcf.json) and [pcf_cloudformation.json](offsite-install-copy-pcf-cloudformaiton.json).

    <pre class="terminal">$ aws s3 cp ~/Downloads/pcf.json s3://cf-software-vi/Bootstrap/pcf.json
    $ aws s3 cp ~/Downloads/pcf_cloudformation.json s3://cf-software-vi/Bootstrap/pcf_cloudformation.json
    </pre>

<p class="note"><strong>Important</strong>: The pcf_cloudformation.json must reference the pcf.json OpsManager template in an S3 bucket accessible from the Chiron environment, as seen below:</p>

<pre>
    "08OpsManagerTemplate": {
      "Type": "String",
      "Default": "https://s3.amazonaws.com/cf-software-vi/Bootstrap/pcf.json",
      "Description": "S3-LOCATION-FOR-CLOUDFORMATION-TEMPLATE"
    }
</pre>

- Create and Upload Server Certificate

    - stuff
    - moar stuff from the 'earlier step'
(Obtain Server Certificate created and uploaded to AWS IAM in an earlier step ([See guide for configuring Chiron SSL Certs](https://github.com/pivotal-federal-field-engineering/dark-chiron-aws/tree/master/certs "Chiron SSL Certs")):
This will be a parameter value feeding the CloudFormation script that will be executed next.)
You will need the value of ____ in the next step. Save it to blah blah, or show pipe command to save.txt or somesuch.

<!-- Stopped reading & editing here for the day. Still need to deal with server cert from above, though -->
<!-- This page http://docs.pivotal.io/pivotalcf/customizing/cloudform-template.html needs to be my friend. -->

```
aws iam get-server-certificate --server-certificate-name cf-elb-cert

```

Example: arn:aws:iam::441480984532:server-certificate/cf-elb-cert

- Log in to AWS Console and create new CloudFormation stack using template uploaded to S3.

Specify an Amazon S3 template URL: https://s3.amazonaws.com/cf-software-vi/Bootstrap/pcf_cloudformation.json

In the Specify Parameters page, complete the following fields:

* 01NATKeyPair: Use the drop-down menu to select the "bosh" key pair.
* 02NATInstanceType: Do not change this value.
* 03OpsManagerIngress: Do not change this value.
* 04RdsDBName: Do not change this value.
* 05RdsUserName: Enter a user name for the RDS database.  Default: "admin".
    Note: Do not enter the user name rdsadmin. AWS reserves the rdsadmin user account for internal database instance management.
* 06RdsPassword: Enter a password for the RDS database.  Must be 8 characters long.
* 07SSLCertificateARN: Enter your uploaded SSL Certificate ARN.  See above.
* 08OpsManagerTemplate: Use the default template link (modified above).

- [ ] Run new stack and confirm success.

AWS creates the infrastructure needed to deploy PCF to AWS.  In EC2 dashboard, you should see a NAT instance running in the pcf-vpc.

### Create Instance Profile
In the Phase 2 customer deployment, we will not be able to use permanent credentials for managing AWS resources on behalf of PCF.  Thus, we'll need to use instance profiles.  An instance profile is a container for an IAM role that you can use to pass role information to an EC2 instance when the instance starts.  Follow along with the [Amazon Documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-iam-instance-profile.html "AWS Documentation") and the steps below from an environment with the AWS CLI tools installed and the requisite credentials to create an instance profile.

- [ ] Copy the [PCF Instance Profile Configuration Files](https://github.com/pivotal-federal-field-engineering/dark-chiron-aws/tree/master/config/aws-instance-profile "Instance Profile Config Scripts"): director_policy.json  and director_trust.json
.

- [ ] Create IAM role "director" referencing the policy document copied from above.

```
aws iam create-role --role-name director --assume-role-policy-document file://director_trust.json
```

- [ ] Add new role policy for director IAM role created above.  The director role will be granted EC2 and load balancing permissions to install and maintain PCF.

```
aws iam put-role-policy --role-name director --policy-name Director-EC2-Permissions --policy-document file://director_policy.json
```

- [ ] Create "director" instance profile.

```
aws iam create-instance-profile --instance-profile-name director
```

- [ ] Attach IAM role created above to instance profile.

```
aws iam add-role-to-instance-profile --instance-profile-name director --role-name director
```

We will associate this instance profile with the Mega Jumpbox and the Bosh Director to manipulate IaaS constructs to run PCF.  You can confirm the successful creation of the instance profile using the following IAM function:

```
aws iam list-instance-profiles
```

### Deploy Mega Jumpbox

Follow the steps below to deploy the Mega Jumpbox into the Chiron environment.  The Mega Jumpbox will be exposed to as a private AMI containing all the tooling and dependencies (stemcells, releases, etc) to deploy Bosh and PCF.  Follow along with the [Pivotal Documentation](http://docs.pivotal.io/pivotalcf/customizing/cloudform-om-deploy.html "Pivotal Documentation") that deploys a public AMI of Ops Manager as a guide to deploying the Mega Jumpbox in Chiron.

The starting point of this short guide is the AMI's listed on the AWS EC2 dashboard.  Filter the list of AMIs by Private images only.  You'll see one or more AMIs named like "bosh-jumpbox" followed by an identifier.  Consult the Pivotal team for the correct jumpbox to deploy.  Launching an AMI prompts a 7-step wizard:

- [ ] Step 1: Choose private AMI of desired Mega Jumpbox to launch.

- [ ] Step 2: Instance type: m3.large (general purpose instance with 2 cpu's and 7.5 GB RAM).

- [ ] Step 3: Configure Instance.  Change the following options:

    * Network: pcf-vpc
    * Subnet: pcf-public-subnet
    * Auto-assign Public IP: Enable
    * IAM role: director (see creation of instance profile above)

- [ ] Step 4: Add Storage.  Adjust the size of Root volume to 100 GB.

- [ ] Step 5: Tag Instance.  Add a Name value of Mega Jumpbox.

- [ ] Step 6: Configure Security Group.  Select existing group: PcfOpsManagerSecurityGroup.

- [ ] Step 7: Launch.  Choose existing key pair: "bosh".

Once the instance is running, record the public DNS name of the Mega Jumpbox and SSH in as follows:

```ssh
ssh -i bosh.pem ubuntu@<public-dns-name>
```

### Deploy Bosh

Follow the steps below to deploy Bosh from the Mega Jumpbox into the Chiron environment.  Bosh will be used to deploy PCF.  Follow along with the [Bosh Documentation](http://bosh.io/docs/init-aws.html "Bosh Documentation") that initializes a Bosh environment in AWS as a guide to deploying Bosh from the Mega Jumpbox in Chiron.

- [ ] Create an Elastic IP 

- [ ] Connected as an authorized user on the Mega Jumpbox (default: ubuntu), create a bosh deployment directory on the Mega Jumpbox.

```
mkdir ~/deployments
```

- [ ] Copy and modify the [Bosh Deployment Manifest](https://github.com/pivotal-federal-field-engineering/deployment-manifests/blob/master/bosh/bosh.yml "Manifest"): bosh.yml into the deployment directory on the Mega Jumpbox.

```
scp -i bosh.pem bosh.yml ubuntu@<public-dns-name>:~/deployments
```

Modify the following parameters:
* Elastic IP (created above)
* Subnet-ID (pcf-public-subnet, AWS Console: VPC)
* Security Group Name (%PcfVmsSecurityGroup%)
* Instance Profile Name (created above)

- [ ] Copy the bosh.pem file to the deployment directory on the Mega Jumpbox.

```
scp -i bosh.pem bosh.pem ubuntu@<public-dns-name>:~/deployments
```

- [ ] Install Bosh:

```
bosh-init deploy ./bosh.yml
```

- [ ] Set Bosh Target

```
bosh target https://10.0.0.6:25555
```

- [ ] Confirm Bosh Status: (copy director UUID for CF deployment manifest below)

```
bosh status
```

### Prepare Bosh for PCF Install
From the Mega Jumpbox, upload the releases and stemcells for the PCF installation:

```
bosh -n upload release /opt/artifacts/releases/cf-mysql-20.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/cf-208.13.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/push-console-release-console-du-jour-203.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/notifications-with-ui-18.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/cf-autoscaling-13.tgz --skip-if-exists
bosh -n upload stemcell /opt/artifacts/stemcells/bosh-stemcell-3094-aws-xen-ubuntu-trusty-go_agent.tgz
```

- [ ] Copy and modify the [CloudFoundry Deployment Manifest](https://github.com/pivotal-federal-field-engineering/deployment-manifests/blob/master/cf/cf-manifest.yml "Manifest"): cf-manifest.yml into the deployment directory on the Mega Jumpbox.

```
scp -i bosh.pem cf-manifest.yml ubuntu@<public-dns-name>:~/deployments
```

Modify the following parameters:
* Director UUID (using <bosh status> above)
* Network Cloud Properties, Subnet-ID: (pcf-private-subnet, AWS Console: VPC)
* DNS settings.  Domain: chiron.vi-works.io.  Configure URLs (except Support) to use this domain.

### Deploy PCF Elastic Runtime
From the Mega Jumpbox, set the deployment and deploy PCF:

- [ ] Set deployment:

```
bosh -n deployment /home/ubuntu/deployments/cf-manifest.yml
```

- [ ] Deploy:

```
bosh -n deploy
``

- [ ] Associate PCF Router with ELB:

In the AWS Console, navigate to the EC2 dashboard and click on Load Balancers.  Find the ELB named "pcf-pcf-elb" and click on the instances tab.  Click on the Edit Instances button and select the PCF Router instance to add to the ELB.  Wait a moment for the health check to run and verify the instance status changes to "InService". 

- [ ] Run bosh utilities to confirm successful installation:

```
bosh -n vms cf-899c17563cb354672cb0
bosh -n cck --report
```

- [ ] Run bosh errands to test Elastic Runtime features:

```
bosh -n run errand push-apps-manager
bosh -n run errand smoke-tests
bosh -n run errand notifications
bosh -n run errand autoscaling
bosh -n run errand autoscaling-register-broker
```

- [ ] Connect to Pivotal App Manager in Chiron:
From any browser, navigate to [Chiron Apps Manager](https://apps.chiron.vi-works.io/ "Chiron Apps Manager") and log in using the admin credentials specified in the PCF manifest.
