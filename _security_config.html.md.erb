1. Click on **Security Config**.

	<%= image_tag("security_config.png") %>

1. Provide an **SSL Termination Certificate** for your SSL Termination Point.
  <% if $this_IaaS == 'AWS-cloudform' %>
    This certificate must match the one that you uploaded to AWS earlier in the
    [Upload an SSL Certificate](./cloudform-template.html#upload-cert) section
    of the [Deploying the CloudFormation Template for PCF on
    AWS](./cloudform-template.html) topic.
    <p class='note'><strong>Note</strong>: Pivotal does not recommend using a
    self-signed certificate for production deployments.</p>
  <%= partial 'known-issue-self-signed-certs' %>
    
  <% else %>
  * In a production environment, use a signed **SSL Certificate**
    from a known certificate authority (CA). Copy and paste the values for
    **Certificate PEM** and **Private Key PEM** from the signed certificate
    into the appropriate text fields.
  * In a development or testing environment, you may use a self-signed
    certificate.
    <p class='note'><strong>Note</strong>: Pivotal does not recommend using a
    self-signed certificate for production deployments.</p>
  <%= partial 'known-issue-self-signed-certs' %>
    To use a self-signed certificate, follow the steps below:
        * Click the **Generate Self-Signed RSA Certificate** link to launch the
          RSA certificate wizard.
        * Enter your system and app domains in wildcard format.
          Optionally, also add any custom domains in wildcard format.
          The example below uses `*.example.com`.
          <p class="note"><strong>Note</strong>: SSL certificates generated for wildcard DNS records only work
            for a single domain name component or component fragment. For
            example, a certificate generated with <code>\*.domain.com</code> does
            not work for <code>apps.domain.com</code> and
            <code>system.domain.com</code>. The certificate must have <code>apps.domain.com</code> and
            <code>system.domain.com</code> both attributed to it. </p>
          <p class="note"><strong>Note</strong>: You can generate a single certificate for two domains separated by a comma. For example, <code>*.apps.domain.com, *.system.domain.com</code>.</p>
        * Click **Generate**.
        <%= image_tag("openstack/generate-cert.png") %>
        * Elastic Runtime populates the **SSL Certificate** fields with RSA
          certificate and private key information.
  <% end %>

1. Configure **Ignore SSL certificate verification**. Select this option if you are using self-signed certificates or certificates generated from Ops Manager.

1. Configure **HAProxy SSL Ciphers** and **Router SSL Ciphers**. Leave these fields blank unless you want to use a specific set of SSL ciphers for HAProxy or the Router.

1. Configure **Disable HTTP traffic to HAProxy**. If you select the **Disable HTTP traffic to HAProxy** checkbox, your deployment rejects all port 80 traffic to HAProxy. Additionally, this option sets the secure flag in the `VCAP_ID` cookie that the Router generates.

    <p class='note'><strong>Note</strong>: If you enable this checkbox and your deployment is not using HAProxy, configure your external load balancer to reject port 80 traffic. If you do not do this, traffic to port 80 is forwarded to applications but loses session stickiness.</p>

1. Configure **Enable cross container traffic**. By selecting this checkbox, you disable the restriction that prevents containers in the same DEA or Diego Cell from communicating with each other. Pivotal does not recommended selecting this checkbox in multi-tenant environments. You should select this option for microservices such as Pivotal Spring Cloud.

1. Configure **Enable TLS on the Router**. Selecting this enables [SSL termination](/pivotalcf/adminguide/enabling-https-to-routers.html) on the Router.
 
1. Click **Save**.
 
