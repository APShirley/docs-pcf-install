---
title: Migrating Apps to Diego
---

This topic contains instructions for migrating apps originally deployed with  DEAs to Diego. The Diego Elastic Runtime architecture replaces the functionality of DEAs with cells.

To upgrade PCF to 1.6, see [Upgrading Elastic Runtime](../upgrading-products.html). In order to migrate your apps, your PCF deployment must be running Elastic Runtime v1.6, which includes Diego.

There are two options for migrating your apps to Diego. The first is simpler but results in a brief downtime interval, and the second option avoids downtime by employing Blue-Green deployment. 

## <a id='simple-migration'></a>Simple Migration (with Downtime)##

This section describes the easier option for migrating apps. This migration clobbers old instances of the app running under DEA with new instances running under Diego, but results in a brief (~1 minute) downtime.

1. Use the Cloud Foundry Command Line Interface (CF CLI) to install the Diego-Enabler plugin.
<pre class='terminal'>
$ cf add-plugin-repo CF-Community <span>http:</span>//plugins.cloudfoundry.org/
$ cf install-plugin Diego-Enabler -r CF-Community
</pre>

1. Run `cf enable-diego APP-NAME` to enable Diego in your app manifest.
<pre class='terminal'>
$ cf enable-diego EXAMPLE-APP
Diego support for EXAMPLE-APP is set to true
</pre>

1. Run `cf push` to push your newly Diego-enabled app.
<pre class='terminal'>
$ cf push
Using manifest manifest.yml...
Updating app...
</pre>

## <a id='blue-green-migration'></a>Migrating Apps with Blue-Green Deployment ##

This method migrates your apps with zero downtime, by temporarily running them redundantly with both DEA and Diego. It relies on the ability to push applications with either DEAs or Diego. The default is Diego. This procedure can be rolled back with zero downtime, if necessary.

### <a id="blue-green-procedure"></a>Migration Procedure

1. Push your application to PCF with a new name and the route for your application. The name cannot be the same as the name of the existing application.
<pre class="terminal">$ cf push NEW-APP</pre>
<p class="note"><strong>Note</strong>:
You must push the same release version of your application that is currently deployed and that you are migrating. Otherwise, static assets like CSS and Javascript that may be served from your application will not be consistent across both versions.
</p>

1. Confirm that the newly deployed application runs properly.
<pre class="terminal">
$ cf app NEW-APP
</pre>

1. Run `has-diego-enabled` to check that Diego manages the new application.
<pre class="terminal">
$ cf has-diego-enabled NEW-APP
</pre>

1. Map the route for your application running on the DEAs to your application running on Diego.  This remapping will result in a second route which points half of your traffic to applications deployed from DEAs and half to applications from Diego.
<pre class="terminal">$ cf map-route NEW-APP MY-DOMAIN.COM -n www</pre>

1. Unmap the route from the application running on the DEAs.  This action sends all of the traffic to the application that is running on Diego.
<pre class="terminal">$ cf unmap-route OLD-APP MY-DOMAIN.COM -n www
</pre>

1. Stop the application that is running on the DEAs. This routes all of the traffic to your app running on Diego and completes the blue-green migration.
<pre class="terminal">$ cf stop OLD-APP</pre>
<p class="note"><strong>Note</strong>:
Verify that your application is still accessible and runs properly.
</p>

1. Delete the old application.
<pre class="terminal">$ cf delete OLD-APP</pre>

### Application Rollback Procedure <a id='application-rollback'></a>

If needed, you can roll back to your application running on the DEAs by starting it and reversing the order of the previous `map-route` and `unmap-route` commands.

1. Start the old application.
<pre class="terminal">$ cf start OLD-APP</pre>

1. Map the old application to your domain.
<pre class="terminal">$ cf map-route OLD-APP MY-DOMAIN.COM -n www</pre>

1. Unmap the new application to your domain.
<pre  class="terminal">$ cf unmap-route NEW-APP MY-DOMAIN.COM -n www</pre>