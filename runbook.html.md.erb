# dark-chiron-aws
Repository for PWS Dark: Chiron Environment.  Basis is from Chronus but tailored for specifics of the customer environment.

## Background
This repository uses the Chronus bootstrap as the starting point for simulating the customer environment to deploy an all inclusive mega-jumpbox that contains everything needed to deploy bosh and Cloud Foundry.

**Note:** You should read this as a systems playbook and follow step by step.

## High Level Tasks
- [ ] Create private repository within pivotal-federal-field-engineering for Chiron environment.  Mimic Chronus directory structure and subscribe for updates.
(This is not true)

- [ ] Set up tracker tasks for managing work in Chiron environment & integration points with other environments.
- [ ] Create an environment that looks as much like the customer environment as possible.  As discussed in previous meetings, this will impose some interesting challenges with regards to AWS specifics (e.g. regions & availability zones) and mimicing the customer identification and authorization schemes.
- [ ] Investigate instance profile use and compatibility.
- [ ] Define scripts for setting up and configuring Chiron environment in AWS.
- [ ] Deploy regular jumpbox until mega jumpbox is created, have all the steps documented out.  Sync with Chronus workflow as needed.
- [ ] Deploy mega jumpbox once it's available.
- [ ] Deploy Bosh and Cloud Foundry into Chiron environment using mega jumpbox.

## Enterprise Services for Customer-Like Environment
The following services need to be simulated for the customer-like environment:

### Directory Services
Purpose: to allow simulated intranet applications the sharing of information about users, groups, and roles through the network.

Sample implementation: LDAP.

Usage: Pivotal's User Account and Authentication (UAA) is the central identity management service for Pivotal's Elastic Runtime platform.  In the customer environment, the Cloud Foundry admin will configure the identity store in UAA to inteface with the existing LDAP environment.

Runbook: Follow the [Chiron LDAP guide] (https://github.com/pivotal-federal-field-engineering/dark-chiron-aws/blob/master/docs/ldap.md "Chiron LDAP Installation and Configuration Guide") in this repo to install and configure secure LDAP in preparation for PCF UAA integration.

Reference(s): 
* [Pivotal Web Services Documentation](http://docs.run.pivotal.io/concepts/security.html. "Pivotal Authentication and Authorization").

### Domain Name System
Purpose: hierarchical distributed naming system for computers, services, or any resource connected to the customer network.  DNS translates a domain name (eg. pivotal.io) to a corresponding IP address via a designated authoritative name service. 

Sample internal implementation: BIND.  Note: external implementation is configured using hosting provider (GoDaddy) utilities to build the requisite CNAME entry for DNS wildcarding on vi-works.io.

Usage:  A domain is not directly bound to an application, but acts as part of the route to an application.  When an application is deployed using Cloud Foundry, a hostname is supplied, which is prepended to the domain to create the full URL, or route, to the application (eg. my-app.pivotal.io).  BIND will translate the request to its corresponding computer resource on the customer's network.  

Runbook: Follow the [Chiron DNS guide] (https://github.com/pivotal-federal-field-engineering/dark-chiron-aws/blob/master/docs/dns.md "Chiron DNS Configuration Guide") in this repo to configure wildcard DNS.

Reference(s): 
* [Pivotal Web Services Documentation: Domains & Routes](http://docs.run.pivotal.io/devguide/deploy-apps/domains-routes.html. "Pivotal Domains and Routes").  
* [Pivotal Web Services Documentation: Domains & Shared Domains](http://docs.run.pivotal.io/devguide/deploy-apps/domains.html. "Pivotal Domains and Shared Domains").  

### Certificate Authority
Purpose: to issue digital certificates for use by servers and users in the Chiron environment.

Sample implementation: OpenSSL, an open source SSL/TLS implementation that comes with tools allowing its use as a simple certificate authority.

Usage: The CA will issue PKI certificates to configure secure communications between clients and the PaaS.  In the customer environment, the PWS Dark team will need to submit a certificate request to be signed by the existing CA.

Runbook: Follow the [Chiron CA Guide](https://github.com/pivotal-federal-field-engineering/dark-chiron-aws/blob/master/docs/ca.md "Chiron CA Installation and Configuration Guide") in this repo to install and configure a CA.

### DTO Box

## Discrepancies Between External and Internal Environments
(List what can be documented: eg. what needs to change for running a CloudFormation script in the internal AWS console).

## Pivotal CloudFoundry Installation

Follow the steps below to deploy PCF into the Chiron environment.  Use the [Pivotal Documentation](http://docs.pivotal.io/pivotalcf/customizing/cloudform.html "Pivotal Documentation") as a guide to ensure all prerequisite steps are complete.

### Bootstrap AWS Environment
[step_1_JBH]
- [ ] Copy and modify the [PWS Dark cloudformation bootstrap artifacts](https://github.com/pivotal-federal-field-engineering/bootstrap-artifacts/tree/master/cloudformation "Cloud Formation Scripts"): pcf.json and pcf_cloudformation.json.

From an environment with the AWS CLI tools installed and the requisite credentials:

```s3uploads
aws s3 cp ~/Downloads/pcf.json s3://cf-software-vi/Bootstrap/pcf.json
aws s3 cp ~/Downloads/pcf_cloudformation.json s3://cf-software-vi/Bootstrap/pcf_cloudformation.json
```

**Important**: Make sure the pcf_cloudformation.json references the pcf.json OpsManager template in an S3 bucket accessible from the Chiron environment, such as the following:

```template
    "08OpsManagerTemplate": {
      "Type": "String",
      "Default": "https://s3.amazonaws.com/cf-software-vi/Bootstrap/pcf.json",
      "Description": "S3 Location for OpsManager CloudFormation Template"
    }
```

- [ ] Obtain Server Certificate created and uploaded to AWS IAM in an earlier step ([See guide for configuring Chiron SSL Certs](https://github.com/pivotal-federal-field-engineering/dark-chiron-aws/tree/master/certs "Chiron SSL Certs")):
This will be a parameter value feeding the CloudFormation script that will be executed next.

```
aws iam get-server-certificate --server-certificate-name cf-elb-cert

```

Example: arn:aws:iam::441480984532:server-certificate/cf-elb-cert

- [ ] Log in to AWS Console and create new CloudFormation stack using template uploaded to S3.

Specify an Amazon S3 template URL: https://s3.amazonaws.com/cf-software-vi/Bootstrap/pcf_cloudformation.json

In the Specify Parameters page, complete the following fields:

* 01NATKeyPair: Use the drop-down menu to select the "bosh" key pair.
* 02NATInstanceType: Do not change this value.
* 03OpsManagerIngress: Do not change this value.
* 04RdsDBName: Do not change this value.
* 05RdsUserName: Enter a user name for the RDS database.  Default: "admin".
    Note: Do not enter the user name rdsadmin. AWS reserves the rdsadmin user account for internal database instance management.
* 06RdsPassword: Enter a password for the RDS database.  Must be 8 characters long.
* 07SSLCertificateARN: Enter your uploaded SSL Certificate ARN.  See above.
* 08OpsManagerTemplate: Use the default template link (modified above).

- [ ] Run new stack and confirm success.

AWS creates the infrastructure needed to deploy PCF to AWS.  In EC2 dashboard, you should see a NAT instance running in the pcf-vpc.

### Create Instance Profile
In the Phase 2 customer deployment, we will not be able to use permanent credentials for managing AWS resources on behalf of PCF.  Thus, we'll need to use instance profiles.  An instance profile is a container for an IAM role that you can use to pass role information to an EC2 instance when the instance starts.  Follow along with the [Amazon Documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-iam-instance-profile.html "AWS Documentation") and the steps below from an environment with the AWS CLI tools installed and the requisite credentials to create an instance profile.

- [ ] Copy the [PCF Instance Profile Configuration Files](https://github.com/pivotal-federal-field-engineering/dark-chiron-aws/tree/master/config/aws-instance-profile "Instance Profile Config Scripts"): director_policy.json  and director_trust.json
.

- [ ] Create IAM role "director" referencing the policy document copied from above.

```
aws iam create-role --role-name director --assume-role-policy-document file://director_trust.json
```

- [ ] Add new role policy for director IAM role created above.  The director role will be granted EC2 and load balancing permissions to install and maintain PCF.

```
aws iam put-role-policy --role-name director --policy-name Director-EC2-Permissions --policy-document file://director_policy.json
```

- [ ] Create "director" instance profile.

```
aws iam create-instance-profile --instance-profile-name director
```

- [ ] Attach IAM role created above to instance profile.

```
aws iam add-role-to-instance-profile --instance-profile-name director --role-name director
```

We will associate this instance profile with the Mega Jumpbox and the Bosh Director to manipulate IaaS constructs to run PCF.  You can confirm the successful creation of the instance profile using the following IAM function:

```
aws iam list-instance-profiles
```

### Deploy Mega Jumpbox

Follow the steps below to deploy the Mega Jumpbox into the Chiron environment.  The Mega Jumpbox will be exposed to as a private AMI containing all the tooling and dependencies (stemcells, releases, etc) to deploy Bosh and PCF.  Follow along with the [Pivotal Documentation](http://docs.pivotal.io/pivotalcf/customizing/cloudform-om-deploy.html "Pivotal Documentation") that deploys a public AMI of Ops Manager as a guide to deploying the Mega Jumpbox in Chiron.

The starting point of this short guide is the AMI's listed on the AWS EC2 dashboard.  Filter the list of AMIs by Private images only.  You'll see one or more AMIs named like "bosh-jumpbox" followed by an identifier.  Consult the Pivotal team for the correct jumpbox to deploy.  Launching an AMI prompts a 7-step wizard:

- [ ] Step 1: Choose private AMI of desired Mega Jumpbox to launch.

- [ ] Step 2: Instance type: m3.large (general purpose instance with 2 cpu's and 7.5 GB RAM).

- [ ] Step 3: Configure Instance.  Change the following options:

    * Network: pcf-vpc
    * Subnet: pcf-public-subnet
    * Auto-assign Public IP: Enable
    * IAM role: director (see creation of instance profile above)

- [ ] Step 4: Add Storage.  Adjust the size of Root volume to 100 GB.

- [ ] Step 5: Tag Instance.  Add a Name value of Mega Jumpbox.

- [ ] Step 6: Configure Security Group.  Select existing group: PcfOpsManagerSecurityGroup.

- [ ] Step 7: Launch.  Choose existing key pair: "bosh".

Once the instance is running, record the public DNS name of the Mega Jumpbox and SSH in as follows:

```ssh
ssh -i bosh.pem ubuntu@<public-dns-name>
```

### Deploy Bosh

Follow the steps below to deploy Bosh from the Mega Jumpbox into the Chiron environment.  Bosh will be used to deploy PCF.  Follow along with the [Bosh Documentation](http://bosh.io/docs/init-aws.html "Bosh Documentation") that initializes a Bosh environment in AWS as a guide to deploying Bosh from the Mega Jumpbox in Chiron.

- [ ] Create an Elastic IP 

- [ ] Connected as an authorized user on the Mega Jumpbox (default: ubuntu), create a bosh deployment directory on the Mega Jumpbox.

```
mkdir ~/deployments
```

- [ ] Copy and modify the [Bosh Deployment Manifest](https://github.com/pivotal-federal-field-engineering/deployment-manifests/blob/master/bosh/bosh.yml "Manifest"): bosh.yml into the deployment directory on the Mega Jumpbox.

```
scp -i bosh.pem bosh.yml ubuntu@<public-dns-name>:~/deployments
```

Modify the following parameters:
* Elastic IP (created above)
* Subnet-ID (pcf-public-subnet, AWS Console: VPC)
* Security Group Name (%PcfVmsSecurityGroup%)
* Instance Profile Name (created above)

- [ ] Copy the bosh.pem file to the deployment directory on the Mega Jumpbox.

```
scp -i bosh.pem bosh.pem ubuntu@<public-dns-name>:~/deployments
```

- [ ] Install Bosh:

```
bosh-init deploy ./bosh.yml
```

- [ ] Set Bosh Target

```
bosh target https://10.0.0.6:25555
```

- [ ] Confirm Bosh Status: (copy director UUID for CF deployment manifest below)

```
bosh status
```

### Prepare Bosh for PCF Install
From the Mega Jumpbox, upload the releases and stemcells for the PCF installation:

```
bosh -n upload release /opt/artifacts/releases/cf-mysql-20.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/cf-208.13.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/push-console-release-console-du-jour-203.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/notifications-with-ui-18.tgz --skip-if-exists
bosh -n upload release /opt/artifacts/releases/cf-autoscaling-13.tgz --skip-if-exists
bosh -n upload stemcell /opt/artifacts/stemcells/bosh-stemcell-3094-aws-xen-ubuntu-trusty-go_agent.tgz
```

- [ ] Copy and modify the [CloudFoundry Deployment Manifest](https://github.com/pivotal-federal-field-engineering/deployment-manifests/blob/master/cf/cf-manifest.yml "Manifest"): cf-manifest.yml into the deployment directory on the Mega Jumpbox.

```
scp -i bosh.pem cf-manifest.yml ubuntu@<public-dns-name>:~/deployments
```

Modify the following parameters:
* Director UUID (using <bosh status> above)
* Network Cloud Properties, Subnet-ID: (pcf-private-subnet, AWS Console: VPC)
* DNS settings.  Domain: chiron.vi-works.io.  Configure URLs (except Support) to use this domain.

### Deploy PCF Elastic Runtime
From the Mega Jumpbox, set the deployment and deploy PCF:

- [ ] Set deployment:

```
bosh -n deployment /home/ubuntu/deployments/cf-manifest.yml
```

- [ ] Deploy:

```
bosh -n deploy
``

- [ ] Associate PCF Router with ELB:

In the AWS Console, navigate to the EC2 dashboard and click on Load Balancers.  Find the ELB named "pcf-pcf-elb" and click on the instances tab.  Click on the Edit Instances button and select the PCF Router instance to add to the ELB.  Wait a moment for the health check to run and verify the instance status changes to "InService". 

- [ ] Run bosh utilities to confirm successful installation:

```
bosh -n vms cf-899c17563cb354672cb0
bosh -n cck --report
```

- [ ] Run bosh errands to test Elastic Runtime features:

```
bosh -n run errand push-apps-manager
bosh -n run errand smoke-tests
bosh -n run errand notifications
bosh -n run errand autoscaling
bosh -n run errand autoscaling-register-broker
```

- [ ] Connect to Pivotal App Manager in Chiron:
From any browser, navigate to [Chiron Apps Manager](https://apps.chiron.vi-works.io/ "Chiron Apps Manager") and log in using the admin credentials specified in the PCF manifest.
