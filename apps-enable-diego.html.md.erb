---
title: Migrating Apps to Diego
owner: Diego
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }

    .note.warning:before {
        color: #f99;
    }
</style>

<strong><%= modified_date %></strong>


This topic describes how to migrate applications from the DEA architecture to the Diego architecture if you are upgrading from Pivotal Cloud Foundry 1.6 to 1.7.

<p class="note warning">
<strong>WARNING: </strong> Before you upgrade to Pivotal Cloud Foundry 1.7, you must migrate all apps that are currently running on DEA architecture to run on Diego architecture. Pivotal does not support DEA architecture in Pivotal Cloud Foundry 1.7.
</p>

Pivotal provides three approaches to migrating your apps to Diego:

* [Overwrite-based migration](#migration-with-downtime) has fewer steps but results in a brief downtime interval.
* [Blue-green migration](#blue-green-migration) avoids downtime by employing [Blue-Green deployment](../devguide/deploy-apps/blue-green.html).
* [Batch migration](#batch-migration) migrates all apps in an org, a space or an entire system with a single cf command.



## <a id='migration-with-downtime'></a>Overwrite-Based Migration##

The second recommended procedure overwrites existing app instances with new ones on the Diego architecture, resulting in a brief (~1 minute) downtime. This approach requires fewer steps than the blue-green deployment procedure.

<p class="note"><strong>Note</strong>: Use overwrite-based migration if a short downtime is acceptable.</p>

1. Use the Cloud Foundry Command Line Interface (CF CLI) to install the Diego-Enabler plugin.
<pre class='terminal'>
$ cf add-plugin-repo CF-Community <span>http:</span>//plugins.cloudfoundry.org/
$ cf install-plugin Diego-Enabler -r CF-Community
</pre>

1. Run `cf enable-diego APP-NAME` to enable Diego in your app manifest.
<pre class='terminal'>
$ cf enable-diego EXAMPLE-APP
Diego support for EXAMPLE-APP is set to true
</pre>

1. Confirm that `APP-NAME` runs properly.
<pre class="terminal">
$ cf app EXAMPLE-APP
</pre>

## <a id='blue-green-migration'></a>Migrating Apps with Blue-Green Deployment ##

The blue-green deployment method migrates your apps with zero downtime. This method temporarily runs your apps in parallel using both the DEA and Diego architectures.

<p class="note"><strong>Note</strong>: If necessary, complete the Application Rollback procedure below to revert the migration with zero downtime.</p>
### <a id="blue-green-procedure"></a>Migrate an App from DEA to Diego Architecture

1. Use the Cloud Foundry Command Line Interface (CF CLI) to install the Diego-Enabler plugin.
<pre class='terminal'>
$ cf add-plugin-repo CF-Community <span>http:</span>//plugins.cloudfoundry.org/
$ cf install-plugin Diego-Enabler -r CF-Community
</pre>

1. Push your application to PCF with a new name and a test route for your application. This app will run on the Diego architecture. Do not use the name or route of the existing application.
<pre class="terminal">$ cf push NEW-APP -d MY-DOMAIN.COM -n TEMP-SUBDOMAIN</pre>
<p class="note"><strong>Note</strong>:
The currently deployed application, OLD-APP, and the application you are pushing, NEW-APP, must be the same version. Otherwise, any static assets served from your application, like CSS and Javascript, will not be consistent across both apps. Now is not the time to upgrade your app.
</p>

1. Confirm that `NEW-APP` runs properly.
<pre class="terminal">
$ cf app NEW-APP
</pre>

1. Run `has-diego-enabled` to confirm that the application is running on the Diego architecture.
<pre class="terminal">
$ cf has-diego-enabled NEW-APP
</pre>

1. If the `has-diego-enabled` command returns false, then set the `diego` boolean to true:
<pre class="terminal">
$ cf enable-diego NEW-APP
</pre>

1. Map the route for your application running on the DEA architecture to `NEW-APP`. This remapping creates a second route that splits your traffic between the DEA and Diego architectures.
<pre class="terminal">$ cf map-route NEW-APP MY-DOMAIN.COM -n MY-SUBDOMAIN</pre>

1. Unmap the route from the application running on the DEA architecture. This action sends all of the traffic to the application that is running on Diego.
<pre class="terminal">$ cf unmap-route OLD-APP MY-DOMAIN.COM -n MY-SUBDOMAIN
</pre>

1. After confirming that the new application is running correctly on Diego, stop `OLD-APP` to route all traffic to `NEW-APP` and complete the blue-green migration.
<pre class="terminal">$ cf stop OLD-APP</pre>
<p class="note"><strong>Note</strong>:
Verify that your application is still accessible and runs properly. If there is a problem with your app, do not complete this procedure. Instead, proceed to the Application Rollback procedure below.
</p>

1. Delete the old application.
<pre class="terminal">$ cf delete OLD-APP</pre>

1. Optional: Delete the route to the TEMP-SUBDOMAIN that you specified when pushing the Diego app for testing. See [Delete a Route](../devguide/deploy-apps/routes-domains.html#delete-route).


### Application Rollback Procedure <a id='application-rollback'></a>

If necessary, complete this procedure to revert your application to the DEA architecture.

<p class="note"><strong>Note</strong>:
This procedure only works if you have not deleted your application that runs on the DEA architecture.
</p>

1. Start your app using the pre-migration name.
<pre class="terminal">$ cf start OLD-APP</pre>

1. Map `OLD-APP` to your domain.
<pre class="terminal">$ cf map-route OLD-APP MY-DOMAIN.COM -n MY-SUBDOMAIN</pre>

1. Unmap the app running on the Diego architecture from your domain.
<pre  class="terminal">$ cf unmap-route NEW-APP MY-DOMAIN.COM -n MY-SUBDOMAIN</pre>

##<a id="batch-migration"></a>Batch Migration

Goes here. 

##<a id="troubleshoot"></a>Troubleshoot Migrated Apps

Because Diego was written to be compatible with DEA, most applications migrated from DEA to Diego continue to run on Diego without change. However, there are differences between DEA and Diego. If you have problems with your application after migrating, review the following changes brought by Diego: 

* Diego does not support the `cf files` command.  Running this command results in the error: `Request failed for app: APP_NAME, instance: INST_NUM and path: PATH` because the instance is not found.  In Diego, use the `cf ssh APP_NAME` command to list files in your application instances.

* Worker applications, those that are pushed with the `--no-route` option, are likely to fail when run on Diego.  You must explicitly disable the port-based health check now that the app runs on Diego.  Run `cf set-health-check APP_NAME none`. 

* You can no longer interpolate environment variables. In DEA, when you set environment variables with the `cf set-env` or in your manifest file, you could include one environment variable in the definition of another, for example, `SOMEPATH=$HOME/SOME/PATH`. You cannot do this with Diego.

* Large applications may fail to stage because of a [known issue](https://github.com/cloudfoundry-incubator/diego-design-notes/blob/master/migrating-to-diego.md#disk-quota-over-enforcement-during-container-setup) where disk usage is over-reported.  This issue typically results in the following error: `Copying into the container failed`.  By default, apps have a 1GB disk quota. If your application files are close to this size, use the `-k` option of `cf push` to increase your disk quota. 

* Staging apps may take longer if you do not specify a buildpack. For faster staging, specify a buildpack with the `-b` option of `cf-push` or in your `manifest.yml` file. See the [Staging Performance](https://github.com/cloudfoundry-incubator/diego-design-notes/blob/master/migrating-to-diego.md#staging-performance) section of the Diego Design notes for more information.

* The `VCAP_APP_HOST` environment variable has been removed. Replace the `VCAP_APP_HOST` environment variable with `0.0.0.0`.

* The `VCAP_APP_PORT` environment variable has been removed. Replace the `VCAP_APP_PORT` environment variable with `PORT`, which is set to `8080` by default.

* Diego imposes a 4KB limit on the maximum size of application routes.  This gives you space for 40 to 50 medium-sized 50-character routes.  Having too many routes bound to your application results in this error: `Runner error: desire app failed: 503`.  In some cases, you can work around this by using a wildcard route, for example, `*.my-domain.com` instead of mapping individual routes.  If you see this error and you cannot wildcard the routes, create another instance of the same application and bind the remaining routes to the second application instance.

* Eclipse, STS, Maven, Gradle, and others based off the Java cf-client need to install the standard cf-client to migrate to Diego. The Java cf-client does not support the migration command at this time.  Also the Java client also does not support disabling or enabling Diego health checks.  If you have a worker application, like the second item above, then you will need to install the cf client to disable the health check.  

