---
title: Preparing to Deploy PCF on GCP
owner: Ops Manager
---

<strong><%= modified_date %></strong>
<html class="list-style-none"></html>

This guide describes the preparation steps required to install Pivotal Cloud Foundry (PCF) on Google Cloud Platform (GCP).

In addition to fulfilling the prerequisites listed in the [Installing Pivotal Cloud Foundry on GCP](./gcp.html) topic, you must create resources in GCP such as a new network, firewall rules, load balancers, and a service account before deploying PCF. Follow these procedures to prepare your GCP environment. You may also find it helpful to review different deployment options in the [Reference Architecture for Pivotal Cloud Foundry on GCP](../refarch/gcp/gcp_ref_arch.html).

## <a id="create_network"></a>Step 1: Create a GCP Network with Subnets ##

1. Log in to the [GCP Console](https://console.cloud.google.com/).
 
1. Navigate to the GCP project where you want to install PCF. 

1. Select **VPC network**, then **CREATE VPC NETWORK**.
  ![Create VPC Network](gcp/gcp-vpc-networks.png)
1. In the **Name** field, enter `MY-PCF-virt-net`.<br>
     `MY-PCF` is a prefix to help you identify resources for this PCF deployment in the GCP console. 
     ![Enter VPC Name](gcp/gcp-vpc-name.png)
  1. Under **Subnets** complete the form as follows:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PCF-subnet-infrastructure-MY-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>A region that supports three availability zones. For help selecting the correct region for your deployment, see the [Google documentation on regions and zones](https://cloud.google.com/compute/docs/regions-zones/regions-zones).</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>An RFC 1918 address ending in `/26`</td>
        </tr>
      </table><br>
      See the following image for an example:
      ![Create VPC Subnet](gcp/gcp-vpc-subnet.png)
    1. Click **Add subnet** to add a second subnet with the following details:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PCF-subnet-ert-MY-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>The same region you selected for the infrastructure subnet</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>An RFC 1918 address ending in `/22`<br>
            Example: `192.168.16.0/22`</td>
        </tr>
      </table><br>
    1. Click **Add subnet** to add a third **Subnet** with the following details:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PCF-subnet-ert-MY-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>The same region you selected for the previous subnets</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>An RFC 1918 address ending in `/22`<br>
            Example: `192.168.20.0/22`</td>
        </tr>
      </table>

1. Click **Create**.

## <a id="create_nat"></a>Step 2: Create NAT Instances ##

1. In the console, navigate to **Compute Engine** > **VM instances**. 
  ![Compute Instance](gcp/gcp-vm-instances.png)

1. Click **CREATE INSTANCE**. 
  ![Create Instance](gcp/gcp-vm-create.png)

1. Complete the following fields:
  * **Name**: Enter `MY-PCF-nat-gateway-pri`. <br>
    This is the first, or primary, of three NAT instances you need. 
  * **Zone**: Select the first zone from your region.<br>
    Example: For region `us-west1`, select zone `us-west1-a`.
  * **Machine type**: Select `n1-standard-4`.
  * **Boot disk**: Click **Change** and select`Ubuntu 14.04 LTS`. 
  <br>
  ![Primary Nat Example](gcp/gcp-primary-nat.png) 

1. Expand the additonal configuration fields by clicking **Management, disks, networking, SSH keys**.   
  ![Management dropdown](gcp/gcp-nat-dropdown.png)
  1. In the **Startup script** field under **Automation**, enter the following text: 
      <code>#! /bin/bash<br>
      sudo sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'<br>
      sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code>
      ![Startup Script](gcp/gcp-nat-startup.png)

1. Click **Networking** to open additional network configuration fields:
  ![NAT Networking settings](gcp/gcp-nat-network.png) 
    1. In the **Network tags** field, add the following: `nat-traverse` and `MY-PCF-nat-instance`. 
    1. Click the pencil icon to edit the **Network interface**. 
    1. For **Network**, select `MY-PCF-virt-net`. You created this network in [Step 1: Create a GCP Network with Subnets](#create-net).
    1. For **Subnetwork**, select `MY-PCF-subnet-infrastructure-MY-GCP-REGION`.
    1. Set **IP forwarding** to `On`. 
    1. Click **Done**.

1. Click **Create** to finish creating the NAT instance.

1. Repeat steps 2-6 to create two additional NAT instances with the names and zones specified in the table below. The rest of the configuration remains the same. 
    <table>
    <tr>
      <th>Instance 2</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-gateway-sec</code>.<br>
        <b>Zone</b>: Select the second zone from your region.<br>
        Example: For region <code>us-west1</code>, select zone <code>us-west1-b</code>.
      </td>
    </tr>
    <tr>
      <th>Instance 3</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-gateway-ter</code>.<br>
        <b>Zone</b>: Select the third zone from your region.<br>
        Example: For region <code>us-west1</code>, select zone <code>us-west1-c</code>.
      </td>
    </tr>
    </table>

### <a id="nat-routes"></a>Create Routes for NAT Instances

1. In the GCP console, navigate to **VPC Networks** > **Routes**. 
  ![NAT Routes](gcp/gcp-vpc-routes.png)

1. Click **CREATE ROUTE**. 

1. Complete the form as follows:
  * **Name**: `MY-PCF-nat-pri`
  * **Network**: `MY-PCF-virt-net`
  * **Destination IP range**: `0.0.0.0/0`
  * **Priority**: `800`
  * **Instance tags**: `MY-PCF`
  * **Next hop**: `Specify an instance`
  * **Next hop instance**: `MY-PCF-nat-gateway-pri`

1. Click **Create** to finish creating the route. 

1. Repeat steps 2-4 to create two additional routes with the names and next hop instances specified in the table below. The rest of the configuration remains the same. 
  <table>
    <tr>
      <th>Route 2</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-sec</code><br>
        <b>Next hop instance</b>: <code>MY-PCF-nat-gateway-sec</code>
      </td>
    </tr>
    <tr>
      <th>Route 3</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-ter</code><br>
        <b>Next hop instance</b>: <code>MY-PCF-nat-gateway-ter</code>
      </td>
    </tr>
    </table>

## <a id="firewall_rules"></a>Step 3: Create Firewall Rules for the Network

GCP lets you assign [tags](https://cloud.google.com/compute/docs/label-or-tag-resources#tags) to virtual machine (VM) instances and create firewall rules that apply to VMs based on their tags. This step assigns tags and firewall rules to Ops Manager components and VMs that handle incoming traffic. 

1. In the **Networking** pane, select **Firewall rules**. 

1. Create firewall rules according to the table below: 
  <table>
  <tr><th colspan="2" style="text-align: center;">Firewall Rules</th></tr>
   <tr>
    <tr>
      <th>Rule 1</th>
      <td>
        This rule allows SSH from public networks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-ssh</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:22</code><br>
        <b>Source IP Ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>allow-ssh</code>
      </td>
    </tr>
    <tr>
      <th>Rule 2</th>
      <td>
        This rule allows HTTP from public networks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-http</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:80</code><br>
        <b>Source IP Ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>allow-http</code>, <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 3</th>
      <td>
        This rule allows HTTPS from public networks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-https</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:443</code><br>
        <b>Source IP Ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>allow-https</code>, <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 4</th>
      <td>
        This rule allows Gorouter health checks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-http-8080</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:8080</code><br>
        <b>Source IP Ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 5</th>
      <td>
        This rule allows communication between BOSH-deployed ERT jobs.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-ert-all</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp;udp;icmp</code><br>
        <b>Target tags</b>: <code>MY-PCF</code>, <code>MY-PCF-opsman</code>, <code>nat-traverse</code><br>
        <b>Source tags</b>: <code>MY-PCF</code>, <code>MY-PCF-opsman</code>, <code>nat-traverse</code>
      </td>
    </tr>
    <tr>
      <th>Rule 6 (Optional)</th>
      <td>
        This rule allows access to the TCP router.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-cf-tcp</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:1024-65535</code><br>
        <b>Target tags</b>: <code>MY-PCF-cf-tcp</code>
      </td>
    </tr>
    <tr>
      <th>Rule 7 (Optional)</th>
      <td>
        This rule allows access to the SSH proxy.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-ssh-proxy</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:2222</code><br>
        <b>Target tags</b>: <code>MY-PCF-ssh-proxy</code>, <code>diego-brain</code><br>
      </td>
    </tr>
  </table>

---------------------------------------------------------------

2. Create a firewall rule to allow all traffic within the subnetwork. 
	* **Name**: Enter a name, such as `all-internal`.
	* **Network**: Select the network you created in the section above, [Create a GCP Network with Subnet](#create_network). 
	* **Source filter**: Choose **Subnetworks**, then select the subnetwork or subnetworks you defined in the section above.
	* **Allowed protocols and ports**: Enter `tcp:0-65535;udp:0-65535;icmp`.
	* **Target tags**: Not used for this firewall rule. This rule uses subnetwork CIDR rules instead to accomodate on-demand service brokers. These brokers deploy VMs outside of Ops Manager and do not apply VM tags.
1. Create a firewall rule to allow `tcp:22;tcp:80;tcp:443` traffic from any source to VMs tagged with `pcf-opsmanager`.
	* **Name**: Enter `pcf-opsmanager`. 
	* **Network**: Select the network you created in the section above, [Create a GCP Network with Subnet](#create_network).
	* **Source filter**: Choose `Allow from any source (0.0.0.0/0)`. 
	* **Allowed protocols and ports**: Enter `tcp:22;tcp:80;tcp:443`.
	* **Target tags**: Enter `pcf-opsmanager`. 
1. Create a firewall rule to allow `tcp:80;tcp:443;tcp:2222;tcp:8080` traffic from any source to VMs tagged with `pcf-lb`.
	* **Name**: Enter `pcf-lb`. 
	* **Network**: Select the network you created in the section above, [Create a GCP Network with Subnet](#create_network).
	* **Source filter**: Choose `Allow from any source (0.0.0.0/0)`. 
	* **Allowed protocols and ports**: Enter `tcp:80;tcp:443;tcp:2222;tcp:8080`.
	* **Target tags**: Enter `pcf-lb`. 
1. If you plan to enable the TCP routing feature, create another firewall rule to allow incoming TCP traffic to the TCP router.
    * **Name**: Enter a name, such as `pcf-tcp-lb`.
    * **Network**: Select the network you created in the section above, [Create a GCP Network with Subnet](#create_network).
	* **Source filter**: Choose `Allow from any source (0.0.0.0/0)`. 
    * **Allowed protocols and ports**: Enter `tcp:1024-65535`.
    * **Target tags**: Enter `pcf-tcp-lb`.

## <a id="iam_account"></a>Step 4: Set up an IAM Service Account ##

1. From the GCP Console, select **IAM & Admin**, then **Service accounts**. 
1. Click **Create Service Account**: 
	* **Service account name**: Enter a name. For example, `bosh`.
	* **Role**: Select the following roles for the service account:
     <p class="note">You must scroll down in the pop-up windows to select all required roles.</p>
     * **Project** > **Service Account Actor** 
     * **Compute Engine** > **Compute Instance Admin**
     * **Compute Engine** > **Compute Network Admin**
     * **Compute Engine** > **Compute Storage Admin**
     * **Storage** > **Storage Admin**
     <p class="note">The **Service Account Actor** role is only required if you plan to use [**The Ops Manager VM Service Account**](./gcp-om-config.html#gcp-config) to deploy Ops Manager.</p>
	* **Service account ID**: The field autogenerates a unique ID based on the username. 
	* **Furnish a new private key**: Select this checkbox and JSON as the **Key type**.
    <%= image_tag("gcp/iam_account.png") %>

1. Click **Create**. Your browser automatically downloads a JSON file with a private key for this account. Save this file in a secure location.

## <a id="enable_compute_resource_api"></a>Step 5: Enable Google Cloud APIs ##

Ops Manager manages GCP resources using the Google Compute Engine and Cloud Resource Manager APIs. To enable these APIs, perform the following steps:

1. Log in to the Google Developers console at [https://console.developers.google.com](https://console.developers.google.com).

1. In the console, navigate to the GCP project where you want to install PCF. 

1. Select **API Manager > Library**.

1. Under **Google Cloud APIs**, select **Compute Engine API**.

1. On the **Google Compute Engine API** page, click **Enable**.

1. In the search field, enter `Google Cloud Resource Manager API`. 

1. On the **Google Cloud Resource Manager API** page, click **Enable**.

1. To verify that the APIs have been enabled, perform the following steps:
    1. Log in to GCP using the IAM service account you created in [Set up an IAM Service Account](#iam_account):
     <pre class="terminal">
     $ gcloud auth activate-service-account --key-file JSON\_KEY\_FILENAME
     </pre>

  1. List your projects:
    <pre class="terminal">
    $ gcloud projects list
    PROJECT\_ID       NAME                 PROJECT\_NUMBER
    my-project-id    my-project-name      ##############
    </pre>
    
    This command lists the projects where you enabled Google Cloud APIs.
    
## <a id="http_loadbalancers"></a>Step 6: Create HTTP Load Balancer ##

### Create Instance Group

1. Navigate to **Compute Engine** > **Instance groups**. 
1. Click **CREATE INSTANCE GROUP**.
1. Complete the form as follows: 
  * For **Name**, enter `MY-PCF-http-lb`
  * For **Location**, select **Multi-zone**. 
  * For **Region**, select the region you specified when creating networks.
  * For **Number of instances**, select `3`.


### Create Health Check

### Create Backend Service

STILL NEED HEALTH CHECK

1. Navigate to **Network Services** > **Load Balancing**. 
1. Click **CREATE LOAD BALANCER**. 
1. Under **HTTP(S) Load Balancing**, click the **Start configuration** button.
  1. Select **Backend configuration**
    1. From the dropdown, select **Backend services** > **Create a backend service**. 
    1. Complete the form as follows:
      * **Name**: `MY-PCF-http-lb-backend`. 
      * **Protocol**: `HTTP`.
      * **Named port**: `http`.
      * **Timeout**: `10 seconds`.  
      * Under **Backends** > **New backend**, select the **Instance group** that corresponds to the first zone of the multi-zone instance group you created. For example: `MY-PCF-http-lb-us-west1-a`.
      * Click **Add backend**, select the **Instance group** that corresponds to the second zone of the multi-zone instance group you created. For example: `MY-PCF-http-lb-us-west1-b`.
      * Click **Add backend**, select the **Instance group** that corresponds to the third zone of the multi-zone instance group you created. For example: `MY-PCF-http-lb-us-west1-c`.
      * **Cloud CDN**: Select the checkbox to **Enable Cloud CDN**. 
   1. Click **Create**. 




## <a id="create_loadbalancers"></a>Step 6: Create Load Balancers in GCP ##

You need at least three and as many as four load balancers to operate PCF on GCP, as follows:

  * [HTTP(S) Load Balancer](#http_https_lb): For HTTP(S) load balancing, using TCP port `80` and `8080`.
  * [SSH Load Balancer](#ssh_lb): For SSH proxy jobs, using TCP port `2222`.
  * [TCP WebSockets Load Balancer](#tcp_websockets_lb): For WebSockets log tailing, using TCP port `443`.
  * [TCP Router](#tcprouter_lb): Optionally, for apps that use the TCP routing feature.

The steps required to set up each load balancer are described below.

### <a id='create-http-and-instance-group'></a>Create Instance Groups and the HTTP(S) Load Balancer ###

To configure HTTP(S) load balancing for PCF on GCP you need to follow two steps:

  1. Create one or more [**Instance Group\(s\)**](#instance_group) for load balancer configuration to the GCP **Backend service**. 
  1. Create an [HTTP(S) Load Balancer](#http_https_lb).

#### <a id="instance_group"></a> Create **Instance Group(s)** ####

You need to create and associate one or more **Instance Group(s)** with the HTTP(S) load balancer you create.

1. From the GCP Console, select **Compute Engine** and click **Instance groups**.
  <%= image_tag("gcp/create_instance_group.png") %>

1. Click **Create instance group**.

1. In the **Create a new instance group** window, name the instance group in the **Name** field. If you are creating multiple instance groups, make sure each instance group name has a unique name. For example, you might create the following instance groups:
  * `pcf-instance-group-lb-1a`
  * `pcf-instance-group-lb-1b`
  * `pcf-instance-group-lb-1c`
  <p class="note"><strong>Note</strong>: You need one Google <strong>Instance Group</strong> for each Availability Zone you plan to support. All <strong>Instance Groups</strong> must connect to the Google <strong>Backend Service</strong> to configure your load balancer, described below. For a high availability production installation of PCF, Pivotal recommends using three availability zones.</p>

1. For each individual instance group, choose **Single-zone** in the **Location** section.

1. From the **Zone** drop-down menu, select a zone that matches the **Region** of the [network](#create_network) you created above. Pick a unique zone for each instance group that you create.  For example, if you created the network in the `us-central1` region, you could pick the following zones for your instance groups:
   * `pcf-instance-group-lb-1a`:`us-central1-a` 
   * `pcf-instance-group-lb-1b`:`us-central1-b` 
   * `pcf-instance-group-lb-1c`:`us-central1-c`

1. Under **Group type**, select **Unmanaged instance group.**

1. Under **Network** and **Subnetwork**, select the network and subnet you created in the [Create a GCP Network with Subnet](#create_network) step above.
  <%= image_tag("gcp/configure_new_instance_group.png") %>
  <p class="note"><strong>Note</strong>: If <code>opsmgr</code> is your only network, the <b>Network</b> drop-down does not appear because the sole network is automatically selected.</p>

1. Click **Create**.

1. If you are creating multiple instance groups, repeat **substeps 2-7** of this procedure.

#### <a id="http_https_lb"></a> Create the HTTP(S) Load Balancer ####

To create a load balancer for HTTP(S) in GCP:

1. From the GCP Console, select **Networking > Load Balancing > Create load balancer**.

1. Under **HTTP(S) Load Balancing**, click **Start configuration**.
  <%= image_tag("gcp/http_lb_configure.png") %>

1. In the **New HTTP(S) load balancer** window, enter `pcf-router` in the **Name** field.
  <%= image_tag "gcp/http_lb_name.png" %>

1. Click **Backend configuration** to configure the **Backend service**. 

1. In the **Create or select a backend service** drop-down menu, choose **Create a backend service** to open the **Backend service** window.

1. Fill in the name for your **Backend service** in the **Name** field. Leave **Protocol** set to **HTTP**.
  <%= image_tag "gcp/backend_service_name.png" %>
1. In the **Backends** section, from the **Instance Group** drop-down menu, choose one of the [Instance Group(s)](#instance_group) you created above, and select it.

1. Add port `80` to the **Port numbers** field for PCF to make API calls.
  <%= image_tag "gcp/backend_service_config.png" %>

1. If you have created multiple instance groups to support a multiple availability zone PCF deployment, perform the following steps:
   1. Click **Add backend**.
   1. Select another instance group from the **Instance Group** drop-down menu. 
   1. Specify port `80` again if necessary. 
   1. Repeat until you have selected all the instance groups (three for three availability zones) that you created.

1. From the **Health check** drop-down menu, click to **Create a Health Check** with the following field values:
   * **Name**: Enter a name, for example `health-check`, or `pcf-public`.
   * **Description**: 
   * **Protocol**: `HTTP`
   * **Port**: `8080`
   * **Request path**: `/health`
   * Use the default <strong>Health criteria</strong> field values:
     * **Check interval**: `5` seconds
     * **Timeout**: `5` seconds
     * **Healthy threshold**: `2` consecutive successes
     * **Unhealthy threshold**: `2` consecutive failures
  <%= image_tag "gcp/health_check_defaults.png" %>
   * Click **Save and continue**. 
   The **Backend configuration** section shows a green check mark.

1. Click **Host and path rules** to populate the default fields and a green check mark.

1. Select **Frontend configuration**, and add the following:
   * **Protocol**: `HTTP`
   * **IP**: Perform the following steps:
       1. Select **Create IP address**. 
       1. Enter a **Name** for the new static IP address and an optional description. For example, `pcf-router-ip`.
       1. Under **IP**, make sure this new static IP address is selected.
       1. Click **Reserve**.
   * **Port**: `80`
1. If you are using a trusted SSL certificate or already have a self-signed certificate, proceed to step 15. 

1. If you want to use a self-signed certificate generated during [Elastic Runtime network configuration](gcp-er-config.html#networking), skip over the next step of adding the HTTPS frontend configuration until after you generate the certificate in Elastic Runtime. After you generate the certificate, return to step 15 using the following guidelines: 
   * Copy and paste the generated contents of the **Router SSL Termination Certificate and Private Key** fields from Elastic Runtime into the public certificate and private key fields. 
   * Since you are using a self-signed certificate, do not enter a value in the **Certificate Chain** field. 

1. Click **Add frontend IP and port**, and add the following:
   * **Protocol**: `HTTPS`
   * **IP**: Select the static IP address you just created for the previous rule.
   * **Port**: Leave `443` selected.
   * **Certificate**: Select **Create a new certificate**. In the next dialog, perform the following steps:
     * In the **Name** field, enter a name for the certificate.
     <%= image_tag "gcp/lb_frontend_cert.png" %>
     * In the **Public key certificate** field, copy in the contents of your public certificate, or upload your certificate as a .pem file.
     * In the **Certificate chain** field, enter or upload your certificate chain in the .pem format. If you are using a self-signed certificate, you do not need to populate this field.
     * In the **Private key** field, copy in the contents or upload the .pem file of the private key for the certificate.
1. Review the completed frontend configuration. 
    <%= image_tag "gcp/lb_frontend_config.png" %>

1. Click **Review and finalize** to verify your configuration.
  <%= image_tag "gcp/http_lb_finalize.png" %>

1. Click **Create**.

### <a id="tcp_websockets_lb"></a> Create the TCP WebSockets Load Balancer

The load balancer for tailing logs with WebSockets for PCF on GCP operates on TCP port `443`. 

1. From the GCP Console, select **Networking > Load Balancing > Create load balancer**.

1. Under **TCP Load Balancing**, click **Start configuration**.
  <%= image_tag("gcp/create_new_lb.png") %>

1. Under **Internet facing or internal only**, select **From Internet to my VMs**. Under **Connection termination**, select **No (TCP)**. 

1. Click **Continue**. 
  <%= image_tag("gcp/lb_connection_termination.png") %>

1. In the **New TCP load balancer** window, enter `pcf-websockets` in the **Name** field.

1. Click **Backend configuration** to configure the **Backend service**: 
  <%= image_tag "gcp/tcp_websockets_backend.png" %>
  * **Region**: Select the region you used to create the network in [Create a GCP Network with Subnet](#create_network).
  * From the **Health check** drop-down menu, select the [**Health check**](#http_https_lb) that you created above.
  The **Backend configuration** section shows a green check mark.

1. Click **Frontend configuration** to open its configuration window and complete the fields:
 * **Protocol**: `TCP`
 * **IP**: Perform the following steps:
       1. Select **Create IP address**. 
       1. Enter a **Name** for the new static IP address and an optional description. For example, `pcf-websockets-ip`.
       1. Click **Reserve**.
 * **Port**: `443` 
   <%= image_tag "gcp/tcp_websockets_frontend.png" %>
1. Click **Review and finalize** to verify your configuration.
  <%= image_tag "gcp/websockets_lb_finalize.png" %>
1. Click **Create**.

### <a id="ssh_lb"></a> Create the SSH Proxy Load Balancer

1. From the GCP Console, select **Networking > Load Balancing > Create load balancer**.

1. Under **TCP Load Balancing**, click **Start configuration**.
  <%= image_tag("gcp/lb-configure.png") %>

1. Under **Internet facing or internal only**, select **From Internet to my VMs**.

1. Under **Connection termination**, select **No (TCP)**. 
  <%= image_tag("gcp/lb_connection_termination.png") %>

1. Click **Continue**. 

1. In the **New TCP load balancer** window, enter `pcf-ssh` in the **Name** field.
  <%= image_tag "gcp/ssl_backend_lb_configuration.png" %>

1. Select **Backend configuration**, and enter the following field values:
   * **Region**: Select the region you used to create the network in [Create a GCP Network with Subnet](#create_network).
   * **Backup pool**: `None`
   * **Failover ratio**: `10%`
   * **Health check**: `No health check`
<%= image_tag("gcp/ssl_lb_backend_config_complete.png") %>

1. Select **Frontend configuration**, and add the following:
   * **Protocol**: `TCP`
   * **IP**: Select the IP address that you created in [Create the TCP WebSockets Load Balancer](#tcp_websockets_lb).
   * **Port**: `2222`

1. Optionally, review and finalize your load balancer. 

1. Click **Create**.

### <a id="tcprouter_lb"></a>(Optional) Create the Load Balancer for TCP Router

<p class="note"><strong>Note</strong>: This step is optional and only required if you enable TCP routing in your deployment.</p>

To create a load balancer for TCP routing in GCP, perform the following steps:

1. From the GCP Console, select **Networking > Load Balancing > Create load balancer**.

1. Under **TCP Load Balancing**, click **Start configuration**.

	<%= image_tag("gcp/lb-configure.png") %>

1. Under **Connection termination**, select **No (TCP)**. Click **Continue**. 

	<%= image_tag("gcp/lb_connection_termination.png") %>

1. On the **New TCP load balancer** screen, enter a unique name for the load balancer in the **Name** field. For example, `pcf-tcp-lb`.

1. Select **Backend configuration**, and enter the following field values:
   * **Region**: Select the region you used to create the network in [Create a GCP Network with Subnet](#create_network).
   * **Health check**: Select the health check for your TCP router. Create a new health check for the TCP router on port `80` in the **Health checks** pane if you do not already have one.
        * Click **Save and continue**.
 <%= image_tag("gcp/tcp_lb_backend.png") %>

1. Select **Frontend configuration**, and add the frontend IP and port entry as follows:
   * **Protocol**: `TCP`
   * **IP**: Perform the following steps:
       1. Select **Create IP address**. 
       1. Enter a **Name** for the new static IP address and an optional description. For example, `pcf-tcp-router-ip`.
       1. Click **Reserve**.
   * **Port**: `1024-65535`

	<%= image_tag("gcp/tcp_lb_frontend.png") %>

1. Click **Review and finalize** to verify your configuration.

1. Click **Create**.

## <a id="next"></a> What to Do Next ###

* (Optional) To save time during the final stage of the installation process, you can start downloading the Elastic Runtime tile. See [Step 1: Download the Elastic Runtime Tile](./gcp-er-config.html#download-er) of the _Deploying Elastic Runtime on GCP_ topic.

* Proceed to the next step in the deployment, [Launching an Ops Manager Director Instance on GCP](./gcp-om-deploy.html). 

